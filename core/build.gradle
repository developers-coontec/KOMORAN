//plugins {
//    id 'net.saliman.cobertura' version '2.3.1'
//    id 'com.github.kt3k.coveralls' version '2.6.3'
//}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://maven.meback.ai/repository/maven-mixed/"
            credentials {
                username "$mavenUser"
                password "$mavenPassword"
            }
        }
    }
}

group = 'com.github.shineware'


apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

version = '1.0.1'
//cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report


repositories {
    mavenLocal()
    maven {
        url "https://maven.meback.ai/repository/maven-mixed/"
        credentials {
            username "$mavenUser"
            password "$mavenPassword"
        }
    }
    jcenter()
    maven { url "https://jitpack.io" }

}

//jar {
//    from {
//
//        configurations.compile.collect {
//            it.isDirectory() ? it : zipTree(it)
//        }
//
//        configurations.runtime.collect {
//            it.isDirectory() ? it : zipTree(it)
//        }
//
//    }
//
//    manifest {
//        attributes 'Main-Class': 'kr.co.shineware.nlp.komoran.run.NewKomoranConsoleRunner2'
//    }
//    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
//}

dependencies {
    compile 'com.github.shineware:commons:1.0.1'
    compile 'com.github.shineware:aho-corasick:1.1.0'
    testCompile 'junit:junit:4.12'
}

task uberJar(type: Jar) {
    appendix = 'uber'

    from sourceSets.main.output
    from configurations.runtimeClasspath
            .findAll { it.name.endsWith('jar') }
            .collect { zipTree(it) }
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources"
        }
    }
}

jar {
    archivesBaseName = "komoran-core"
}


publishing {
    repositories {
        maven {
            credentials {
                username "$mavenUser"
                password "$mavenPassword"
            }
//            def releasesRepoUrl = "https://maven.meback.ai/repository/maven-releases/"
//            def snapshotsRepoUrl = "https://maven.meback.ai/repository/maven-snapshots/"
//            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            url = "https://maven.meback.ai/repository/maven-mixed/"
        }
    }
    publications {
        maven(MavenPublication) {
            groupId group
            artifactId jar.baseName
            version version
            from components.java
        }
    }
}
